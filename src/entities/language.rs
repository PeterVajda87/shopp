//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "language")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub code: String,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::category_translation::Entity")]
    CategoryTranslation,
    #[sea_orm(has_many = "super::product_translation::Entity")]
    ProductTranslation,
    #[sea_orm(has_many = "super::sku_translation::Entity")]
    SkuTranslation,
    #[sea_orm(has_many = "super::slug::Entity")]
    Slug,
}

impl Related<super::category_translation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategoryTranslation.def()
    }
}

impl Related<super::product_translation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductTranslation.def()
    }
}

impl Related<super::sku_translation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SkuTranslation.def()
    }
}

impl Related<super::slug::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Slug.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::category_translation::Relation::Category.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::category_translation::Relation::Language.def().rev())
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        super::product_translation::Relation::Product.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::product_translation::Relation::Language.def().rev())
    }
}

impl Related<super::sku::Entity> for Entity {
    fn to() -> RelationDef {
        super::sku_translation::Relation::Sku.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sku_translation::Relation::Language.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
