//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "description")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub text: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::category_description::Entity")]
    CategoryDescription,
    #[sea_orm(has_many = "super::product_description::Entity")]
    ProductDescription,
    #[sea_orm(has_many = "super::sku_description::Entity")]
    SkuDescription,
}

impl Related<super::category_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CategoryDescription.def()
    }
}

impl Related<super::product_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductDescription.def()
    }
}

impl Related<super::sku_description::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SkuDescription.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::category_description::Relation::Category.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::category_description::Relation::Description
                .def()
                .rev(),
        )
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        super::product_description::Relation::Product.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::product_description::Relation::Description
                .def()
                .rev(),
        )
    }
}

impl Related<super::sku::Entity> for Entity {
    fn to() -> RelationDef {
        super::sku_description::Relation::Sku.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sku_description::Relation::Description.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
