//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "variant")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub attribute: Option<String>,
    pub attribute_value: Option<String>,
    pub sku: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::attribute::Entity",
        from = "Column::Attribute",
        to = "super::attribute::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Attribute,
    #[sea_orm(
        belongs_to = "super::attribute_value::Entity",
        from = "Column::AttributeValue",
        to = "super::attribute_value::Column::Value",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AttributeValue,
    #[sea_orm(
        belongs_to = "super::sku::Entity",
        from = "Column::Sku",
        to = "super::sku::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sku,
}

impl Related<super::attribute::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attribute.def()
    }
}

impl Related<super::attribute_value::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AttributeValue.def()
    }
}

impl Related<super::sku::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sku.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
